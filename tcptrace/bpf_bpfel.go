// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *bpfObjects
//     *bpfPrograms
//     *bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	SysConnect    *ebpf.ProgramSpec `ebpf:"sys_connect"`
	SysConnectRet *ebpf.ProgramSpec `ebpf:"sys_connect_ret"`
	SysSendto     *ebpf.ProgramSpec `ebpf:"sys_sendto"`
	SysSendtoRet  *ebpf.ProgramSpec `ebpf:"sys_sendto_ret"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	AcceptingArgs           *ebpf.MapSpec `ebpf:"accepting_args"`
	ConectingArgs           *ebpf.MapSpec `ebpf:"conecting_args"`
	SockDataEventCreatorMap *ebpf.MapSpec `ebpf:"sock_data_event_creator_map"`
	SocketOptsEventsQueue   *ebpf.MapSpec `ebpf:"socket_opts_events_queue"`
	WritingArgs             *ebpf.MapSpec `ebpf:"writing_args"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	AcceptingArgs           *ebpf.Map `ebpf:"accepting_args"`
	ConectingArgs           *ebpf.Map `ebpf:"conecting_args"`
	SockDataEventCreatorMap *ebpf.Map `ebpf:"sock_data_event_creator_map"`
	SocketOptsEventsQueue   *ebpf.Map `ebpf:"socket_opts_events_queue"`
	WritingArgs             *ebpf.Map `ebpf:"writing_args"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.AcceptingArgs,
		m.ConectingArgs,
		m.SockDataEventCreatorMap,
		m.SocketOptsEventsQueue,
		m.WritingArgs,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	SysConnect    *ebpf.Program `ebpf:"sys_connect"`
	SysConnectRet *ebpf.Program `ebpf:"sys_connect_ret"`
	SysSendto     *ebpf.Program `ebpf:"sys_sendto"`
	SysSendtoRet  *ebpf.Program `ebpf:"sys_sendto_ret"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.SysConnect,
		p.SysConnectRet,
		p.SysSendto,
		p.SysSendtoRet,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed bpf_bpfel.o
var _BpfBytes []byte
